#!/bin/bash

# Authorized Bluetooth addresses are necessary for this script to work properly.
# The bt_devices file may be stored anywhere, but I keep in etc/motion/ for the sake of keeping things together.
# The bt_devices file should be an executable Bash script similar to the following:
#
# #!/bin/bash
# export DEVICE1=XX:XX:XX:XX:XX:XX
# export DEVICE2=XX:XX:XX:XX:XX:XX

# Make person names and device BT addresses available to this script.
source /etc/motion/bt_devices

# Person based variables
# If DEVICE1 is defined and is not empty, get the current occupancy status of Person 1.
if [[ -n ${DEVICE1-} ]]; then
    STATUS1=`/usr/bin/hcitool name $DEVICE1`
else
    STATUS1=""
fi

# If DEVICE2 is defined and is not empty, get the current occupancy status of Person 2.
if [[ -n ${DEVICE2-} ]]; then
    STATUS2=`/usr/bin/hcitool name $DEVICE2`
else
    STATUS2=""
fi

# Use the following as a template for adding more devices.
# Be mindful that searching for a non-existent device takes about 5 seconds to timeout,
# So, it may be unwise to define EVERY member of a household.

# If DEVICEX is defined and is not empty, get the current occupancy status of Person X.
#if [[ -n ${DEVICEX-} ]]; then
#    STATUSX=`/usr/bin/hcitool name $DEVICEX`
#else
#    STATUSX="UNDEFINED"
#fi

# Time based variables
# Get the current time, define the time window within which to force motion detection.
CURRENTTIME=`/bin/date +'%H%M'`
OVERRIDEBEGIN=2200
OVERRIDEEND=0600

# Motion program based vaiables
# Get the PID of motion, define the credentials needed to access the motion control port (defined in motion.conf),
# get the status of the default motion/camera thread (0).
MOTIONPID=`/bin/pidof motion`
CREDENTIALS="pi:raspberry"
MOTIONSTATUS_0=`/usr/bin/lwp-request -C $CREDENTIALS http://localhost:8080/0/detection/status`

# Log based variables
# Define the local logging directory, set the format for the logfile name, define the local logfile, get the last line of the current logfile,
# define the S3 logging directory, define the format of the timestamp used within the logs.
LOGDIR=/mnt/picam/logs
LOGNAME=`/bin/date +'%F'`
LOGFILE=$LOGDIR/$LOGNAME.log
TIMESTAMP=`/bin/date +'%F %R'`

#Make sure log directory exists.
if [ ! -d "$LOGDIR" ]; then
    /bin/mkdir -p $LOGDIR
fi

#Make sure there is at least an empty logfile.
if [ ! -f "$LOGFILE" ]; then
    /bin/touch $LOGFILE
fi

# Check the contents last line of the logfile
LASTLOG=`tail -n 1 $LOGFILE`

### If Motion is running... ###
if [ "$MOTIONPID" ]; then
    ### If any devices are present... ###
    # Don't forget to add a condition for any additional devices you may have added.
    # Example to add STATUSX:
    # if [ "$STATUS1" != "" ] || [ "$STATUS2" != "" ] || [ "$STATUSX" != "" ]; then...
    if [ "$STATUS1" != "" ] || [ "$STATUS2" != "" ]; then
        #Update the log if the last logs aren't the same as the current status.
        if [[ "$LASTLOG" != *"Occupied."* ]]; then
            /bin/echo "[$TIMESTAMP] Occupied." >> $LOGFILE
            /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/config/set?text_left=Camera+1%5CnOCCUPIED" > /dev/null
        fi
        #If Motion IS actively recording, AND the time IS NOT within the specified override hours, then PAUSE the recording.    
        if [[ "$MOTIONSTATUS_0" == *"ACTIVE"* ]]; then
            if [ "$CURRENTTIME" -ge "$OVERRIDEEND" ] && [ "$CURRENTTIME" -lt "$OVERRIDEBEGIN" ]; then
                /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/detection/pause" > /dev/null
                /bin/echo "[$TIMESTAMP] Motion detection PAUSED." >> $LOGFILE
                /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/config/set?text_right=%25Y-%25m-%25d+%25H%3A%25M%5CnPAUSED" > /dev/null
            fi
        #If Motion IS NOT actively recording, AND the time IS within the specified override hours, then START the recording.
        elif [[ "$MOTIONSTATUS_0" == *"PAUSE"* ]]; then
            if [ "$CURRENTTIME" -ge "$OVERRIDEBEGIN" ] || [ "$CURRENTTIME" -lt "$OVERRIDEEND" ]; then
                /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/detection/start" > /dev/null
                /bin/echo "[$TIMESTAMP] Motion detection STARTED." >> $LOGFILE
                /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/config/set?text_right=%25Y-%25m-%25d+%25H%3A%25M%5CnSTANDBY" > /dev/null
            fi
        fi
    ### If no devices are present... ###
    # Don't forget to add a condition for any additional devices you may have added.
    # Example to add STATUSX:
    # elif [ "$STATUS1" != "" ] || [ "$STATUS2" != "" ] || [ "$STATUSX" != "" ]; then...
    elif [ "$STATUS1" == "" ] && [ "$STATUS2" == "" ]; then
        #Update the log if the last logs aren't the same as the current status.
        if [[ "$LASTLOG" != *"Unoccupied."* ]]; then
            /bin/echo "[$TIMESTAMP] Unoccupied." >> $LOGFILE
            /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/config/set?text_left=Camera+1%5CnUNOCCUPIED" > /dev/null
        fi
        #If Motion IS NOT actively recording, then START the recording.
        if [[ "$MOTIONSTATUS_0" == *"PAUSE"* ]]; then
            /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/detection/start" > /dev/null
            /bin/echo "[$TIMESTAMP] Motion detection STARTED." >> $LOGFILE
            /usr/bin/lwp-request -C $CREDENTIALS "http://localhost:8080/0/config/set?text_right=%25Y-%25m-%25d+%25H%3A%25M%5CnSTANDBY" > /dev/null
        fi
    fi
### If Motion is not running... ###
elif [ "$MOTIONPID" == "" ]; then
    /bin/echo "[$TIMESTAMP] Motion is not running." >> $LOGFILE
fi

# Sync logs to S3
/etc/motion/log_sync > /dev/null
